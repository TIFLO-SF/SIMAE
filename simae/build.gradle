
plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'org.openjfx.javafxplugin' version "0.0.10"
    id 'application'
    id 'java'
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id 'com.github.node-gradle.node' version '3.0.0'
}

version = '1.0.0'

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

def javaFxVersion = 11

dependencies {
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
    implementation 'info.picocli:picocli:4.6.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'
    implementation project(':simae-languages')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}


tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

application {
    mainClass = 'simae.standalone.cli.CommandLineInterface'
}

// Tarea para generar el archivo version.properties
task generateVersionFile {
    doLast {
        def versionFile = file('src/main/resources/version.properties')
        versionFile.text = "version=${project.version}\n"
    }
}

shadowJar {
    classifier = null
}

build {
    dependsOn generateVersionFile
    dependsOn shadowJar
}
